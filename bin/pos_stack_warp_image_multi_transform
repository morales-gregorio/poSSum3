#!/usr/bin/python
# -*- coding: utf-8 -*

"""

"""

import os
import sys
from optparse import OptionGroup
import copy

from possum.pos_wrapper_skel import output_volume_workflow
from possum import pos_parameters
from possum import pos_wrappers
from possum.pos_itk_core import autodetect_file_type
from possum.pos_common import r


class stack_warp_image_multi_transform(output_volume_workflow):
    """
    """

    _f = {
        'moving_raw':
            pos_parameters.filename('moving_raw',
                                    work_dir='00_override_this',
                                    str_template='{idx:04d}.nii.gz'),
        'fixed_raw':
            pos_parameters.filename('fixed_raw',
                                    work_dir='00_override_this',
                                    str_template='{idx:04d}.nii.gz'),
        'output_transforms':
            pos_parameters.filename('output_transforms',
                                    work_dir='02_transforms',
                                    str_template='{idx:04d}.nii.gz'),
        'output_transf_affine':
            pos_parameters.filename('output_transf_affine',
                                    work_dir='02_transforms',
                                    str_template='{idx:04d}.txt'),
        'components':
            pos_parameters.filename('components',
                                    work_dir='04_rgb_components',
                                    str_template='{idx:04d}_{comp:02d}.nii.gz'),
        'resliced_components':
            pos_parameters.filename('resliced_components',
                                    work_dir='05_resliced_rgb_components',
                                    str_template='{idx:04d}_{comp:02d}.nii.gz'),
        'resliced':
            pos_parameters.filename('resliced',
                                    work_dir='06_resliced',
                                    str_template='{idx:04d}.nii.gz'),
        'resliced_mask':
            pos_parameters.filename('resliced_mask',
                                    work_dir='06_resliced',
                                    str_template='%04d.nii.gz'),
        'out_volume':
            pos_parameters.filename('out_volume',
                                    work_dir='07_output_volumes',
                                    str_template='{fname}_color.nii.gz'),
        }

    _usage = ""

    # Define the magic numbers:
    __IMAGE_DIMENSION = 2
    __VOL_STACK_SLICE_SPACING = 1
    __NUMBER_OF_COMPONENTS = 3

    def _initializeOptions(self):
        super(self.__class__, self)._initializeOptions()

        # Assert if the image stack is defined.
        assert self.options.sliceRange is not None,\
            r("The input image slice is not provided. \
              Please supply the input image range: --slices-range.")

        # Range of images to register
        self._logger.debug("Setting the slice range.")
        self.options.sliceRange = \
            range(self.options.sliceRange[0],
                  self.options.sliceRange[1] + 1)

        # Assert if the transformation stack is defined.
        assert self.options.transformSpec is not None, \
           r("At least one transformation is required in the \
             transformation chain. Please supply at least one \
             --appendTransformation option")

        # Since, in some, rare cases, the transformation indexing is different
        # than the actual slice indexing there is a possibility to specify a
        # separate set of indexes for the transformation files.  However, if
        # such custom index set is not provided, both ranges will be defined to
        # be the same.
        self._logger.debug("Setting the transformations range.")
        if self.options.transformationsRange is not None:
            self._logger.debug("Using the custom transformation range.")
            self.options.transformRange = \
                range(self.options.transformationsRange[0],
                    self.options.transformationsRange[1] + 1)
        else:
            self._logger.debug("Using the same set of indexes as the slices.")
            self.options.transformRange = self.options.sliceRange

        # In both cases, the lists of indices has to have the same length.
        assert len(self.options.transformRange) == \
            len(self.options.sliceRange), \
            self._logger.error(r("Indexes for the slices and for the  \
            transformations does not have equal lenght."))
        # This condition is required since below we create slice to
        # transformation mapping:

        # Here, we create a slice to transformation index mapping.  This means
        # that for each slice to be reslices we assign corresponding
        # transformation file index.
        self._slice_transform_map = \
            dict(zip(self.options.sliceRange, self.options.transformRange))
        self._logger.debug("Slice to transformation index mapping: %s."
            % str(self._slice_transform_map))

        # Check for the fixed images directory
        assert self.options.fixedImageInputDirectory is not None,\
            self._logger.error(r("Fixed images directory is a obligatory \
            parameters. Please supply the '--fixedImageInputDirectory' \
            parameter."))

        # And for the moving images directory
        assert self.options.movingImageInputDirectory is not None,\
            self._logger.error(r("Fixed images directory is a obligatory \
            parameters. Please supply the '--movingImageInputDirectory' \
            parameter."))

    def _overrideDefaults(self):
        super(self.__class__, self)._overrideDefaults()

        # Override default output volumes directory if custom directory is
        # provided (We check before if proper parameter values are provided).
        self.f['moving_raw'].override_dir = \
            self.options.movingImageInputDirectory
        self.f['fixed_raw'].override_dir = \
            self.options.fixedImageInputDirectory

        # Transformation directory is not obligaroty. When no custom output
        # transformation directory is provided, the default dir is used.
        # Pretty obvious.
        if self.options.transformationsDirectory is not False:
            self.f['output_transforms'].override_dir = \
                self.options.transformationsDirectory
        if self.options.transformationsDirectory is not False:
            self.f['output_transf_affine'].override_dir = \
                self.options.transformationsDirectory

        # Apart from just setting the custom output volumes directory, one can
        # also customize even the output filename of both, grayscale and
        # multichannel volumes! That a variety of options!
        if self.options.outputVolumesDirectory is not False:
            self.f['out_volume'].override_dir = \
                self.options.outputVolumesDirectory

        if self.options.volumeFilename:
            self.f['out_volume'].override_fname = \
                self.options.volumeFilename

        # At the very end we check if the reslice interpolation has a correct
        # value.:
        assert self.options.resliceInterpolation in [None, "NN", "BS"], \
            r("Incorrect reslice interpolation value. See the help for \
            the list of allowed values.")

    def launch(self):
        # Execute the parents before-execution activities
        super(self.__class__, self)._pre_launch()

        self._load_transformations_chain()

        # Do not inspect the input files if the script is run in the
        # trial mode
        if self.options.dry_run is False:
            self._inspect_input_data()

        if self.options.skipReslice is False:
            self._compose_transforms()
            self._reslice()

        if self.options.skipOutputVolumes is False:
            self._stack_output_images()

        # Run parent's post execution activities
        super(self.__class__, self)._post_launch()

    def _load_transformations_chain(self):
        """
        Load the specification of the individual transformation.

        As this script is designed to deal with itk affine transfomations in
        form of the text files only these are widely supported. In theory, the
        script should work fine for the deformation fields but this has not
        been tested at all.
        """

        # Initialize workflow-wide transformation array.
        self.transformations = []

        # Make a flag indicating that there are only affine transformations if
        # form of txt files. This flag will be changes if an deformation field
        # transformation will be encountered.
        self._affine_transforms_only = True

        # Iterate over all provided transformation and then put it into the
        # transformation array. The provided transformation is used in
        # "forward" mode when the "0" is used in the paramters specification.
        # When the transformation specification is "1" used in the transform
        # specification, the inversion of the transformation is used.
        for transfSpec in self.options.transformSpec:

            if int(transfSpec[0]) == 1:
                invert = " -i "
            else:
                invert = " "

            # Deformation filed encountered. Disable the 'affine only' flag.
            if transfSpec[1].endswith(".nii.gz"):
                self._affine_transforms_only = False

            # Add forward or inverse tranfromation for the transformation
            # chain. Note that the array stores only the transformation
            # templates. This means that each template has to be exeluated in
            # order to get a particular fiename.
            self.transformations.append(invert + transfSpec[1])

    def _compose_transforms(self):
        """
        Creates a composite transformation based for whole image stack.
        """

        commands = []
        for slice_index, transform_index in self._slice_transform_map.items():
            commands.append(
                self._compose_transformation_chain(slice_index, transform_index))
        self.execute(commands)

    def _compose_transformation_chain(self, slice_index, transform_index):
        """
        Composes a single composite transformation based on a provided chain of
        transformations.

        :param transform_index: iindex of the transformation chain to merge
        :type transform_index: int

        :rtype: `pos_wrappers.ants_compose_multi_transform`
        :return: Transformation composition wrapper.
        """

        # Define the output transformation string.
        # The output transformation filename depends on the type of the
        # transformation series. It may be a deformation field or a text file.
        if self._affine_transforms_only is True:
            filename_type = 'output_transf_affine'
            reference_image_filename = None
        else:
            filename_type = 'output_transforms'
            reference_image_filename = self.f['fixed_raw'](idx=slice_index)
        out_transform_filename = self.f[filename_type](idx=transform_index)

        # Create a list of all the input transformations.
        transformations_list = \
            map(lambda x: x % transform_index, self.transformations)

        # Create and return a transformation composition wrapper.
        command = pos_wrappers.ants_compose_multi_transform(
            dimension=self.__IMAGE_DIMENSION,
            output_image=out_transform_filename,
            reference_image=reference_image_filename,
            deformable_list=[],
            affine_list=transformations_list)
        return copy.deepcopy(command)

    def _compose_reslice(self, slice_index, transform_index, channel_index=False):
        """
        """
        # I the channel index is provided, it means we actually dealing with a
        # component of a multichannel image. In such case a different set of
        # filename templates is used:
        if channel_index is not False:
            moving_image_filename = self.f['components'](idx=slice_index, comp=channel_index)
            resliced_image_filename = self.f['resliced_components'](idx=slice_index, comp=channel_index)
            reference_image_filename = self.f['fixed_raw'](idx=slice_index)
        else:
            # Define all the filenames required by the reslice command
            moving_image_filename = self.f['moving_raw'](idx=slice_index)
            resliced_image_filename = self.f['resliced'](idx=slice_index)
            reference_image_filename = self.f['fixed_raw'](idx=slice_index)

        # Create a list of all the input transformations.
        transformations_list = \
            map(lambda x: x % transform_index, self.transformations)

        # Define the interpolation method based on the command line parameters.
        # The way how transformations are defined is quite crazy due to how
        # ants reslice accepts the reslice settings. Anyway, there are two
        # parameters defined on the provided interpolation settings.
        interpolation_settings = {None: (None, None), "NN": (True, None),
                                  "BS": (None, True)}
        use_nn, use_b_splines = \
            interpolation_settings[self.options.resliceInterpolation]

        # Create and return a transformation composition wrapper.
        command = pos_wrappers.ants_reslice(
            dimension=self.__IMAGE_DIMENSION,
            moving_image=moving_image_filename,
            output_image=resliced_image_filename,
            reference_image=reference_image_filename,
            useNN=use_nn,
            useBspline=use_b_splines,
            deformable_list=[],
            affine_list=transformations_list)

        return copy.deepcopy(command)

    def _inspect_input_data(self):
        """
        Verify if all the files are availabe: All images have to be ailable. If
        the case is different, the workflow will not proceed and the user will
        be asked to supply the missing images.
        """
        self._logger.debug("Inspecting all the input slices and transformations.")

        # Below we iterate over all indexes of the input slices. For each
        # index, the existance if the images is assesed. Then the
        # transformation index related for the given slice index is extracted
        # and all transformations related with given slice are validated.
        for slice_index, transform_index in self._slice_transform_map.items():
            slice_filename = self.f['moving_raw'](idx=slice_index)
            self.__is_filename_available(slice_filename)
            # Done with the slice image.

            # Iteate over all transformations related with the given slice
            # index.
            for transfSpec in self.options.transformSpec:
                transform_filename = transfSpec[1] % transform_index
                self.__is_filename_available(transform_filename)

        self._logger.info(r("Apparently all the files required \
                            by the workflow are available."))

    def __is_filename_available(self, filename):
        """
        A helper function which queries for the given filename. Checks if the
        file is available. If the file is not valid
        or not accesible, outputs the error and exits
        the script.

        :param filename: Path to validate
        :type filename: str

        :return: None. Exits to system when the file is invalid.
        """

        self._logger.debug("Checking for file: %s.", filename)
        if not os.path.isfile(filename):
            self._logger.error("File does not exist: %s. Exiting", filename)
            sys.exit(1)

    def _reslice(self):
        """
        Reslice input images according to composed transformations. Both,
        grayscale and multichannel images are resliced.
        """
        if self.options.skipReslice is True:
            self._logger.info("Reslicing is skipped.")
            return

        # Determine the image type and use proper reslicing routine depending
        # on the image type (either grayscale reslicing process or the rgb
        # image reslicing process). To determine the image type, the first
        # image in the stack is read and the component type is determined. If
        # the image is a multicomponent, a multicomponent reslicing workflow is
        # used.
        self._logger.debug(r("Detecting the image properties of the first \
            image in the stack to choose a proper reslicing routine."))
        first_img_idx = list(self._slice_transform_map.items())[0][0]
        first_img_fname = self.f['moving_raw'](idx=first_img_idx)
        pixel_type = autodetect_file_type(first_img_fname, ret_itk=False)[0]

        if pixel_type in ["vector", "rgb"]:
            self._logger.info(r("Reslicing the images using the \
                                multichannel workflow."))

            # Prepare the commands batches, each batch for a single processing
            # step: components preparation, component reslicing and the
            # component merge.
            commands_prepare = []
            commands_reslice = []
            commands_merge = []

            # A convenient function for getting the list of filenames of
            # the individual components
            def components_fnames(index, fn_tplt):
                files = map(lambda x:
                    self.f[fn_tplt](idx=index, comp=x),
                    range(self.__NUMBER_OF_COMPONENTS))
                return files

            for slice_index, transform_index in self._slice_transform_map.items():

                # Get the filenames of the moving images components filenames
                components = components_fnames(slice_index, 'components')

                # Then get the resliced components filenames
                resliced_components = \
                    components_fnames(slice_index, 'resliced_components')

                # Splitting the mc images into individual components
                command_prepare = pos_wrappers.split_multichannel_image(
                    input_image=self.f['moving_raw'](idx=slice_index),
                    output_components=components)
                commands_prepare.append(command_prepare)

                # Reslicing the individual components of the image
                for channel_index in range(self.__NUMBER_OF_COMPONENTS):
                    commands_reslice.append(self._compose_reslice(
                        slice_index, transform_index, channel_index))

                # Merging back the resliced components.
                command_merge = pos_wrappers.merge_components(
                    input_images=resliced_components,
                    components_no=self.__NUMBER_OF_COMPONENTS,
                    output_image=self.f['resliced'](idx=slice_index),
                    region_origin=self.options.regionOrigin,
                    region_size=self.options.regionSize,
                    other_files_remove=components)
                commands_merge.append(command_merge)

            # Execute all the command batched in the approperiate order.
            self._logger.info("Extracting individual components.")
            self.execute(commands_prepare)
            self._logger.info("Reslicing the images.")
            self.execute(commands_reslice)
            self._logger.info("Merging the components.")
            self.execute(commands_merge)

        else:
            self._logger.info(r("Reslicing the images using the \
                                grayscale reslice workflow."))
            commands = []
            for slice_index, transform_index in self._slice_transform_map.items():
                commands.append(self._compose_reslice(slice_index, transform_index))
            self.execute(commands)

        # Yeap, it's done.
        self._logger.info("Finished reslicing.")

    def _stack_output_images(self):
        """
        Execute stacking images based on grayscale and multichannel images.
        Both resliced image stacks are turned into volumetric files by this
        method.
        """

        self._logger.info("Stacking the resliced images.")
        command = self._get_generic_stack_slice_wrapper(
                    'resliced_mask', 'out_volume')
        self.execute(command)

        self._logger.info("Stacking is done.")

    def _get_generic_stack_slice_wrapper(self, mask_type, ouput_filename_type):
        """

        Return generic command wrapper suitable either for stacking grayscale
        images or multichannel images. Aproperiate command line wrapper is returned
        depending on provided `mask_type` and `output_filename_type`.  The command
        line wrapper is prepared mostly based on the command line parameters which
        are common between both images stacks thus so there is no need to
        parametrize them individually.

        :param mask_type: mask type determining which images stack will be
                          converted into a volume.
        :type mask_type: str

        :param ouput_filename_type: output filename naming scheme.
        :type ouput_filename_type: str
        """

        # Assign some usefull aliases.
        start, stop = self.options.sliceRange[0], self.options.sliceRange[-1]

        output_filename = self.f[ouput_filename_type](fname="output_volume")

        # Define the warpper according to the provided settings.
        command = pos_wrappers.stack_and_reorient_wrapper(
            stack_mask=self.f[mask_type](),
            slice_start=start,
            slice_end=stop,
            slice_step=self.__VOL_STACK_SLICE_SPACING,
            output_volume_fn=output_filename,
            permutation_order=self.options.output_volume_permute_axes,
            orientation_code=self.options.output_volume_orientation,
            output_type=self.options.output_volume_scalar_type,
            spacing=self.options.output_volume_spacing,
            origin=self.options.output_volume_origin,
            interpolation=self.options.output_volume_interpolation,
            resample=self.options.output_volume_resample)

        # Return the created wrapper.
        return copy.deepcopy(command)

    @classmethod
    def _getCommandLineParser(cls):
        """
        """

        parser = output_volume_workflow._getCommandLineParser()

        obligatory_options = \
            OptionGroup(parser, 'Obligatory options')

        obligatory_options.add_option('--slices-range', default=None,
            type='int', dest='sliceRange', nargs=2,
            help='[Required] Index of the fist and the last images in the stack.')
        obligatory_options.add_option('--transformationsRange', default=None,
            type='int', dest='transformationsRange', nargs=2,
            help='[Optional] The first and the last transformation index.')
        obligatory_options.add_option('--transformations-directory', default=None,
            dest='transformationsDirectory', action='store',
            help='Store transformations in given directory instead of using default one.')
        obligatory_options.add_option('--fixedImageInputDirectory', default=None,
            type='str', dest='fixedImageInputDirectory', help='')
        obligatory_options.add_option('--movingImageInputDirectory', default=None,
            type='str', dest='movingImageInputDirectory', help='')
        obligatory_options.add_option('--appendTransformation', default=None,
            type='str', action='append',  nargs=2,
            dest='transformSpec', help='')

        workflow_settings = \
            OptionGroup(parser, 'Workflow execution settings')

        workflow_settings.add_option('--skipReslice', default=False,
            dest='skipReslice', action='store_const', const=True,
            help='Supress reslicing the images.')
        workflow_settings.add_option('--skipComposeTransformations', default=False,
            dest='skipComposeTransformations', action='store_const', const=True,
            help='Suppress merging the transformation.')
        workflow_settings.add_option('--skipOutputVolumes', default=False,
            dest='skipOutputVolumes', action='store_const', const=True,
            help='Supress generating color volume')
        workflow_settings.add_option('--output-volumes-directory', default=None,
            dest='outputVolumesDirectory', action='store',
            help=r('Store output volumes in given directory instead \
                   of using default one.'))
        workflow_settings.add_option('--volumeFilename', default=False,
            dest='volumeFilename', type='str',
            help='Filename for the output grayscale volume')

        image_processing_options = \
            OptionGroup(parser, "Image processing options")

        image_processing_options.add_option('--reslice-interpolation',
            dest='resliceInterpolation', default=None, type='str',
            help=r('Interpolation used during the application of the \
                transformation chain to the slices. This is not \
                interpolation used during stacking the resliced images \
                into a output volume. Linear by default byt may be changed \
                into NN or Bspline. For the NN interpolation put just "NN" \
                while for the Bspline interpolation put BS. \
                No other string will be accepted.'))
        # TODO: Try to provide the reslice background option.
        image_processing_options.add_option('--regionOrigin',
            dest='regionOrigin', default=None, type='int', nargs=2,
            help='Region origin in voxels (2 values)')
        image_processing_options.add_option('--regionSize',
            dest='regionSize', default=None, type='int', nargs=2,
            help='Region size in voxels (2 values)')

        parser.add_option_group(workflow_settings)
        parser.add_option_group(obligatory_options)
        parser.add_option_group(image_processing_options)

        return parser


if __name__ == '__main__':
    options, args = stack_warp_image_multi_transform.parseArgs()
    process = stack_warp_image_multi_transform(options, args)
    process.launch()
