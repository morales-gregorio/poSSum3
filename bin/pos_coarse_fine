#!/usr/bin/python
# -*- coding: utf-8 -*

"""
The coarse-to-fine script splits a series of transformations into low- and high
frequency components.
"""

import os
import sys

import copy
import numpy

from scipy.ndimage.filters import gaussian_filter1d
from optparse import OptionGroup

from possum import pos_parameters
from possum import pos_wrappers
from possum.pos_wrapper_skel import generic_workflow
from possum.pos_common import r


class coarse_to_fine_transformation_merger(generic_workflow):
    """
    The coarse-to-fine script splits a series of transformations into low- and
    high frequency components. See the literature:

    Yushkevich PA, Avants BB, Ng L, Hawrylycz M, Burstein PD, Zhang H, Gee JC.
    2006. 3D mouse brain reconstruction from histology using a coarse-to-fine
    approach. In: Pluim JPW, Likar B, Gerritsen FA, editors. Lecture Notes in
    Computer Science (including subseries Lecture Notes in Artificial Intelligence
    and Lecture Notes in Bioinformatics). Lecture Notes in
    Computer Science. Berlin, Heidelberg: Springer Berlin Heidelberg. p. 230–237.
    http://link.springer.com/10.1007/11784012

    Majka P, Wójcik DK. 2015. Possum—A Framework for Three-Dimensional
    Reconstruction of Brain Images from Serial Sections. Neuroinformatics.
    http://link.springer.com/10.1007/s12021-015-9286-1

    for description of the algorithm and its implementation.
    Also see the 'test_banana_effect' for an example application of the workflow.
    """

    _f = {
        'fine_transf': pos_parameters.filename('fine_transf', work_dir='01_fine_transformation', str_template='{idx:04d}.txt'),
        'smooth_transf': pos_parameters.filename('smooth_transf', work_dir='03_smooth_transformation', str_template='{idx:04d}.txt'),
        'final_transf': pos_parameters.filename('final_transf', work_dir='04_final_transformation', str_template='{idx:04d}.txt'),
        'fine_report': pos_parameters.filename('fine_report', work_dir='05_reports', str_template='fine_transformations.csv'),
        'smooth_report': pos_parameters.filename('smooth_report', work_dir='05_reports', str_template='smooth_transformations.csv'),
        'difference_report': pos_parameters.filename('difference_report', work_dir='05_reports', str_template='difference_trasnformations.csv'),
        'final_report': pos_parameters.filename('final_report', work_dir='05_reports', str_template='final_transformations.csv'),
        'graph': pos_parameters.filename('graph', work_dir='05_reports', str_template='graph_{desc:workflow}.png'),
        'graph_source': pos_parameters.filename('graph_source', work_dir='05_reports', str_template='graph_source.plt'),
         }

    def _initializeOptions(self):
        super(self.__class__, self)._initializeOptions()

        # Assert if both: starting slice index and the last slice index
        # are actually provided.
        assert self.options.sections_range is not None,\
            self._logger.error(r("Starting and ending slices indexes \
            are not provided. Please supply \
            the first and the last section index."))

        # Range of images to register. This is pretty self explaining.
        # Note that at this point we are overriding the original, initial
        # value of the `sections_range`. This may cause some troubles in future
        # but now seems to work fine.
        self.options.sections_range = \
            range(self.options.sections_range[0],
                  self.options.sections_range[1] + 1)

        # Define default smoothing kernels for different type of parameters:
        fields_array = ['smoothing_simga_rotation', 'smoothing_simga_offset',
                        'smoothing_simga_scaling', 'smoothing_simga_fixed']

        # This is a bit more complicated. Iterate over the parameters regarding
        # the custom parameters' set. If given custom parameter is not defined,
        # use the generic parameter instead.
        for field in fields_array:
            if getattr(self.options, field) is None:
                setattr(self.options, field, self.options.smoothing_simga)

    def _overrideDefaults(self):
        super(self.__class__, self)._overrideDefaults()

        # Assert if the proper transformation naming schemes are provided:
        assert self.options.fine_transform_filename_template is not None,\
            self._logger.error(r("Fine transformation filename template \
            is an obligatory parameter."))

        assert self.options.output_transform_filename_template is not None,\
            self._logger.error("Please provide an output \
            transformation filename template.")

        assert self.options.smooth_transform_filename_template is not None,\
            self._logger.error("Please provide a smoothed \
            transformation filename template.")

        # Latch the provided naming schemes.
        self.f['fine_transf'].override_path = \
            self.options.fine_transform_filename_template
        self.f['final_transf'].override_path = \
            self.options.output_transform_filename_template
        self.f['smooth_transf'].override_path = \
            self.options.smooth_transform_filename_template

        filenames_to_check = map(lambda x: self.f['fine_transf']() % x, \
            self.options.sections_range)

        for transf_filename in filenames_to_check:
            self._logger.debug("Checking for image: %s.", transf_filename)

            if not os.path.isfile(transf_filename):
                self._logger.error("File does not exist: %s. Exiting",
                    transf_filename)
                sys.exit(1)

        # Oh, an the last but not least. One can assign a custom reports
        # directory (for whatever reason :). If that'workflow the case
        if self.options.reports_directory is not None:
            self.f['fine_report'].override_dir = self.options.reports_directory
            self.f['smooth_report'].override_dir = self.options.reports_directory
            self.f['difference_report'].override_dir = self.options.reports_directory
            self.f['final_report'].override_dir = self.options.reports_directory
            self.f['graph'].override_dir = self.options.reports_directory
            self.f['graph_source'].override_dir = self.options.reports_directory

    def launch(self):
        # At the very beginning we read all the provided fine transformations
        self._extract_transformation_parameters()

        # The parameters of the transformation are then smoothed to filter out
        # the low frequency component of the transformation parameters.
        self._calculate_smoothed_transforms()

        # Sometimes it is required to turn off calculation of the
        # transformations
        if self.options.skip_transforms is False:
            self._store_smoothed_transformations()
            self._generate_final_transformations()

    def _extract_transformation_parameters(self):
        """
        Iterate over all supplied parameters, collect the transformation
        parameters and finally create numpy array containing all the extracted
        parameters.
        """
        # An array holding parameters of the transformations befoer they're
        # actually converted to numpy array.
        transformation_parameters = []

        # Interate over all slices, extract parameters of the trasnformation.
        for slice_index in self.options.sections_range:
            transformation_parameters.append(
                self._set_single_transformation_parameters(slice_index))

        # After collecting parameters of the all transformations convert the
        # parameters into numpy arrays before conducting any futher
        # calculations
        self._parameters_array = numpy.array(transformation_parameters).T

        # So basically we end up with all the transformation parameters
        # extracted from the series of fine transformations.

    def _set_single_transformation_parameters(self, slice_index):
        """
        Load a given transformation file and extract and return tranasformation
        parameters.

        :param slice_index: the slice index
        :type slice_index: int

        :return: list of the parameters extracted from the transformation
                 files.
        :rtype: list
        """

        # Simple as it goes: define the name of the transformation file, grab
        # the file'workflow content and extract the transformation parameters
        # from the file'workflow content.
        transformation_filename = self.f['fine_transf']() % slice_index
        transformation_string = open(transformation_filename).readlines()
        transformation_parameters =\
            self._extract_transformation_data(transformation_string)

        return transformation_parameters

    def _extract_transformation_data(self, transformation_string):
        """
        This function assumes that itk rigid transformation file has a proper
        structure.

        :param transformation_string: string to extract parameters from
        :type transformation_string: str

        :return: list of the transformation parameters extracted from the
                 transformation string.
        :rtype: list
        """

        # Check if the string really contains a itk transformation:
        # To prove that the file contains an actual itk rigid transformation
        # we simply check if the first two lines contains "Transform" and
        # "Parameters" strings, respectively. While this is not bullet-proof
        # it allows to point out some simple mistakes.
        transformation_string_validation_flag = True

        if not transformation_string[2].strip().split(':')[0] == 'Transform':
            transformation_string_validation_flag = False

        if not transformation_string[3].strip().split(':')[0] == 'Parameters':
            transformation_string_validation_flag = False

        # Assert if the transformation_string_validation_flag is True
        assert transformation_string_validation_flag, \
            r("One of the supplied transformation files is corrupted \
            or it is not a valid transformation file.")

        # Extract the transformation parameters (first line)
        # and then the fixed parameters of the transformation (the bottom line)
        parameters_string = \
            transformation_string[3].strip().split(':')[1].strip().split(' ')
        fixed = \
            transformation_string[4].strip().split(':')[1].strip().split(' ')

        # as the extracted parameters are in fact strings, convert them to
        # floats ...
        transformation_parameters = map(float, parameters_string)
        fixed_parameters = map(float, fixed)

        # ... and finally join them into a single list
        all_parameters = transformation_parameters + fixed_parameters

        return all_parameters

    def _calculate_smoothed_transforms(self):
        """
        Extracts the low frequency component of the transformation and
        calculates the difference between the initial transformation and the
        low frequency component of the initial transformation. Bla bla...
        """

        # Just create a few aliases. They are so short that actually I think
        # they are even too short :)
        k = self._parameters_array
        l = k.copy()

        # Save initial transformation parameters before processing :)
        initial_parameters_filename = self.f['fine_report']()
        self._save_parameters_array(k, initial_parameters_filename)

        # Smooth the initial transformation. There are three types of
        # parameters, each of them may recieve different ammount of smoothing
        # if required.  The parameter types are: scaling (no unit), offset and
        # fixed parametes (physical units) and translation (no unit). By
        # default all types of parameters are smoothed with the same kernel.
        # Using command line parameters one can customize this behaviour.
        parameters_index = \
            {'fixed': ([6, 7], self.options.smoothing_simga_fixed),
             'offset': ([4, 5], self.options.smoothing_simga_offset),
             'rotation': ([1, 2], self.options.smoothing_simga_rotation),
             'scaling': ([0, 3], self.options.smoothing_simga_scaling)}

        # Apply smoothing for each of the parameters. Each kind of parameters
        # is smoothed with a amount of smoothing which depends on the king of
        # the parameter :)
        for index, sigma in parameters_index.values():
            for i in index:
                l[i, :] = gaussian_filter1d(k[i], sigma)[0: k.shape[1]]

        # Save smoothed parameters array:
        smoothed_parameters_array_filename = self.f['smooth_report']()
        self._save_parameters_array(l, smoothed_parameters_array_filename)

        # And save the smoothed paramters array as we we need to actually
        # use the parameters in some further cfomputations within this
        # workflow.
        self._smoothed_parameters = l

        # Store difference of two sets of transformations as well:
        diff_parameters_array_filename = self.f['difference_report']()
        self._save_parameters_array(k - l, diff_parameters_array_filename)

    def _save_parameters_array(self, parameters_array, filename):
        """
        Stores the given transformation parameters array as text file. Really,
        no big deal here.

        :param parameters_array: parameters array to store
        :type parameters_array: np.array

        :param filename: filename to store the array in
        :type filename: str
        """
        numpy.savetxt(filename, parameters_array.T)

    def _store_smoothed_transformations(self):
        """
        Saves the smoothed transformation parameters as a itk transformation
        files.
        """

        # Just an alias:
        l = self._smoothed_parameters

        # Iterate over the smoothed transformation parameters, exctract the
        # parameters and save them as an itk transformation file.
        for i in range(l.shape[1]):
            slice_index = i + self.options.sections_range[0]
            output_filename = self.f['smooth_transf']() % slice_index
            self._save_itk_transform(list(l[:, i]), output_filename)

    def _save_itk_transform(self,  parameters, filename):
        """
        Creates and saves the itk rigid transformation based on the provided
        parameters.

        :param parameters: itk rigid transformation parameters
        :type parameters: np.array

        :param filename: filename to store the parameters in
        :type filename: str
        """
        # Just make an alias.
        p = parameters

        # And then form the transformation string. After saving the
        # transformation string just save it into the file. Easy.
        tstr = ""
        tstr += "#Insight Transform File V1.0\n"
        tstr += "#Transform 0\n"
        tstr += "Transform: MatrixOffsetTransformBase_double_2_2\n"
        tstr += "Parameters: %f %f %f %f %f %f\n" % (p[0], p[1], p[2], p[3], p[4], p[5])
        tstr += "FixedParameters: %f %f\n" % (p[6], p[7])
        open(filename, 'w').write(tstr)

    def _save_identity_itk_transformation(self, filename):
        """
        Saves the two dimensional itk identity transformation under the
        provided filename.

        :param filename: filename to store the transformation into
        :type filename: str
        """

        # Define the identiry transformation parametres (which are very simple)
        identity_transformation_parameters = \
            [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]

        # And the execute the regular `_save_itk_transform` function
        self._save_itk_transform(identity_transformation_parameters, filename)

    def _generate_final_transformations(self):
        """
        Iterate over all transformations and compute the inversion of the
        transformation.  The inversion of the smoothed fine transformation is
        called the "final" transformation.
        """

        commands = []
        for slice_index in self.options.sections_range:
            commands.append(self._store_final_transformation(slice_index))
        self.execute(commands)

    def _store_final_transformation(self, slice_index):
        """
        :param slice_index: index of the slice to save final
                            transformation for.
        :type slice_index: int

        :return: invert affine transformation commad wrapper.
        :rtype: `invert_affine_transform`
        """
        input_transformation = self.f['smooth_transf']() % slice_index
        # Ok, here'workflow a trick. We hereby cheat by adding "-i" switch to
        # the actual transformation name. This will cause the ANTS
        # transformation composition binary file to invert given transformation
        # instead of using the forward transfomation.
        input_transformation = " -i " + input_transformation

        output_transformation = self.f['final_transf']() % slice_index

        command = pos_wrappers.ants_compose_multi_transform(
            output_image=output_transformation,
            affine_list=[input_transformation])
        return copy.deepcopy(command)

    def _get_parameters_based_filename_prefix(self):
        """
        Generate output naming prefix. The parameters based filename prefix
        helps to easier identify given results among multiple attempts
        performed with different parameters.
        """
        ret_value = ""

        ret_value += "_start_" + str(self.options.sections_range[0])
        ret_value += "_end_" + str(self.options.sections_range[-1])

        ret_value += "_s_" + str(self.options.smoothing_simga)
        ret_value += "_sR_" + str(self.options.smoothing_simga_rotation)
        ret_value += "_sO_" + str(self.options.smoothing_simga_offset)
        ret_value += "_sS_" + str(self.options.smoothing_simga_scaling)
        ret_value += "_sF_" + str(self.options.smoothing_simga_fixed)

        return ret_value

    @classmethod
    def _getCommandLineParser(cls):

        usage_string = "\n\n%prog \n\
            -i input_from_sequential_alignment/sequential_%04d_Affine.txt \n\
            -s output_from_coarse_to_fine/01_smooth/smooth_%04d.txt \n\
            -o output_from_coarse_to_fine/02_output/output_%04d.txt \n\
            --sections-range 1 100 \n\
            --smoothing-simga 5 \n\
            --smoothing-simga-rotation 3 \n\
            --smoothing-simga-offset 5  \n\
            --smoothing-simga-fixed 7 \n\
            --reports-directory 008_coarse_to_fine/ \n\
            --loglevel DEBUG \n\
            --cleanup \n\
            [other options]"

        parser = generic_workflow._getCommandLineParser()
        parser.set_usage(usage_string)
        parser.set_description(r("""The coarse-to-fine script splits a series
        of transformations into low- and
        high frequency components. See the literature:
        Yushkevich PA, Avants BB, Ng L, Hawrylycz M, Burstein PD, Zhang H, Gee JC.
        2006. 3D mouse brain reconstruction from histology using a coarse-to-fine
        approach. In: Pluim JPW, Likar B, Gerritsen FA, editors. Lecture Notes in
        Computer Science (including subseries Lecture Notes in Artificial Intelligence
        and Lecture Notes in Bioinformatics). Lecture Notes in
        Computer Science. Berlin, Heidelberg: Springer Berlin Heidelberg. p. 230-237.
        http://link.springer.com/10.1007/11784012
        Majka P, Wojcik DK. 2015. Possum-A Framework for Three-Dimensional
        Reconstruction of Brain Images from Serial Sections. Neuroinformatics.
        http://link.springer.com/10.1007/s12021-015-9286-1
        for description of the algorithm and its implementation.
        Also see the 'test_banana_effect' for an example application of the workflow."""))

        parser.add_option('-i', '--fine-transform-filename-template',
            default=None, dest='fine_transform_filename_template',
            action='store', metavar="FNAME_TEMPLATE",
            help=r('Filename template for the fine (affine) \
            transformations. This should only include the actual filename \
            template without directory. An example template could be e.g: \
            "fine_%04d.txt".'))
        parser.add_option('-s', '--smooth-transform-filename-template',
            default=None, dest='smooth_transform_filename_template',
            action='store', metavar="FNAME_TEMPLATE",
            help=r('Filename template for the smoothed (affine) \
            transformations. This should only include the actual filename \
            template without directory. An example template could be e.g: \
            "smooth_%04d.txt".'))
        parser.add_option('-o', '--output-transform-filename-template',
            default=None, dest='output_transform_filename_template',
            action='store', metavar="FNAME_TEMPLATE",
            help=r('Filename template for the output (affine) \
            transformations. This should only include the actual filename \
            template without directory. An example template could be e.g: \
            "output_%04d.txt".'))
        parser.add_option('--sections-range', default=None, type='int',
            dest='sections_range', nargs=2, metavar="INT INT",
            help=r('The range of indexes of sections to be included. \
            Provide two integers: index of the first and index of the \
            last sections to be processed. Please provide the actual \
            indexes of the sections as the forkflow automatically adds \
            the nesessary offseet in the Python range function.'))

        smoothing_settings = \
            OptionGroup(parser, 'Processing settings.')
        smoothing_settings.add_option('--smoothing-simga', default=5,
            type='float', dest='smoothing_simga', metavar="FLOAT",
            help=r('General gaussian smoothing sigma. This value will \
            be used for smoothing scaling, rotation and translation \
            parameters of the transformation unless specific values \
            for these parameters are defined (see below). \
            Please provide a single FLOAT value here.'))
        smoothing_settings.add_option('--smoothing-simga-rotation',
            default=None, type='float', metavar="FLOAT",
            dest='smoothing_simga_rotation',
            help=r('A specific smoothing setting for rotation \
            parameter of the transformation.'))
        smoothing_settings.add_option('--smoothing-simga-scaling',
            default=None, type='float', metavar="FLOAT",
            dest='smoothing_simga_scaling', help=r('A specific smoothing \
            setting for the scaling parameter of the transformations.'))
        smoothing_settings.add_option('--smoothing-simga-offset',
            default=None, type='float',  metavar="FLOAT",
            dest='smoothing_simga_offset', help=r('A specific smoothing \
            setting for the translation parameters of transformations.'))
        smoothing_settings.add_option('--smoothing-simga-fixed',
            default=None, type='float', dest='smoothing_simga_fixed',
            metavar="FLOAT", help=r('A specific smoothing setting for the \
            fixed parameters of the transformations.'))

        workflow_settings = \
            OptionGroup(parser, 'Workflow settings')
        workflow_settings.add_option('--reports-directory', default=None,
            dest='reports_directory', action='store',
            metavar="DIRECTORY", help=r('Use custom reports directory \
            instead of using default one.'))
        workflow_settings.add_option('--skip-transforms',
            default=False, dest='skip_transforms',
            action='store_const', const=True,
            help=r('Suppresses generation of the output transformation. \
            Only generates the smoothed transformations.'))

        parser.add_option_group(workflow_settings)
        parser.add_option_group(smoothing_settings)
        return parser

if __name__ == '__main__':
    options, args = coarse_to_fine_transformation_merger.parseArgs()
    workflow = coarse_to_fine_transformation_merger(options, args)
    workflow.launch()
